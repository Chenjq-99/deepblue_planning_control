# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from carla_ackermann_msgs/EgoVehicleControlInfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import carla_ackermann_msgs.msg
import carla_msgs.msg
import std_msgs.msg

class EgoVehicleControlInfo(genpy.Message):
  _md5sum = "dc2719c7e816ee0bd3fbbf8de4fec4db"
  _type = "carla_ackermann_msgs/EgoVehicleControlInfo"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """#
# Copyright (c) 2018-2019 Intel Corporation.
#
# This work is licensed under the terms of the MIT license.
# For a copy, see <https://opensource.org/licenses/MIT>.
#
# This represents an info message of the ego vehicle

std_msgs/Header header

# the restrictions
EgoVehicleControlMaxima restrictions

# the target values
EgoVehicleControlTarget target

# the currently measured values
EgoVehicleControlCurrent current

# the current control status
EgoVehicleControlStatus status

# the current control output to CARLA
carla_msgs/CarlaEgoVehicleControl output

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: carla_ackermann_msgs/EgoVehicleControlMaxima
#
# Copyright (c) 2018-2019 Intel Corporation.
#
# This work is licensed under the terms of the MIT license.
# For a copy, see <https://opensource.org/licenses/MIT>.
#
# This represents some ego vehicle control maximal values

# vehicle maximum values
float32 max_steering_angle
float32 max_speed
float32 max_accel
float32 max_decel
float32 min_accel
float32 max_pedal

================================================================================
MSG: carla_ackermann_msgs/EgoVehicleControlTarget
#
# Copyright (c) 2018-2019 Intel Corporation.
#
# This work is licensed under the terms of the MIT license.
# For a copy, see <https://opensource.org/licenses/MIT>.
#
# This represents the target speed/accel values of the ego vehicle

float32 steering_angle
float32 speed
float32 speed_abs
float32 accel
float32 jerk

================================================================================
MSG: carla_ackermann_msgs/EgoVehicleControlCurrent
#
# Copyright (c) 2018-2019 Intel Corporation.
#
# This work is licensed under the terms of the MIT license.
# For a copy, see <https://opensource.org/licenses/MIT>.
#
# This represents the current time/speed/accel values of the vehicle used by the controller

float32 time_sec
float32 speed
float32 speed_abs
float32 accel
================================================================================
MSG: carla_ackermann_msgs/EgoVehicleControlStatus
#
# Copyright (c) 2018-2019 Intel Corporation.
#
# This work is licensed under the terms of the MIT license.
# For a copy, see <https://opensource.org/licenses/MIT>.
#
# This represents the control status variables of the ego vehicle control

# the current control status
string status

# speed controller
uint8   speed_control_activation_count
float32 speed_control_accel_delta
float32 speed_control_accel_target

# acceleration controller
float32 accel_control_pedal_delta
float32 accel_control_pedal_target

# borders for lay off pedal
float32 brake_upper_border
float32 throttle_lower_border

================================================================================
MSG: carla_msgs/CarlaEgoVehicleControl
#
# Copyright (c) 2018-2019 Intel Corporation.
#
# This work is licensed under the terms of the MIT license.
# For a copy, see <https://opensource.org/licenses/MIT>.
#
# This represents a vehicle control message sent to CARLA simulator

std_msgs/Header header

# The CARLA vehicle control data

# 0. <= throttle <= 1.
float32 throttle

# -1. <= steer <= 1.
float32 steer

# 0. <= brake <= 1.
float32 brake

# hand_brake 0 or 1
bool hand_brake

# reverse 0 or 1
bool reverse

# gear
int32 gear

# manual gear shift
bool manual_gear_shift
"""
  __slots__ = ['header','restrictions','target','current','status','output']
  _slot_types = ['std_msgs/Header','carla_ackermann_msgs/EgoVehicleControlMaxima','carla_ackermann_msgs/EgoVehicleControlTarget','carla_ackermann_msgs/EgoVehicleControlCurrent','carla_ackermann_msgs/EgoVehicleControlStatus','carla_msgs/CarlaEgoVehicleControl']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,restrictions,target,current,status,output

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(EgoVehicleControlInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.restrictions is None:
        self.restrictions = carla_ackermann_msgs.msg.EgoVehicleControlMaxima()
      if self.target is None:
        self.target = carla_ackermann_msgs.msg.EgoVehicleControlTarget()
      if self.current is None:
        self.current = carla_ackermann_msgs.msg.EgoVehicleControlCurrent()
      if self.status is None:
        self.status = carla_ackermann_msgs.msg.EgoVehicleControlStatus()
      if self.output is None:
        self.output = carla_msgs.msg.CarlaEgoVehicleControl()
    else:
      self.header = std_msgs.msg.Header()
      self.restrictions = carla_ackermann_msgs.msg.EgoVehicleControlMaxima()
      self.target = carla_ackermann_msgs.msg.EgoVehicleControlTarget()
      self.current = carla_ackermann_msgs.msg.EgoVehicleControlCurrent()
      self.status = carla_ackermann_msgs.msg.EgoVehicleControlStatus()
      self.output = carla_msgs.msg.CarlaEgoVehicleControl()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_15f().pack(_x.restrictions.max_steering_angle, _x.restrictions.max_speed, _x.restrictions.max_accel, _x.restrictions.max_decel, _x.restrictions.min_accel, _x.restrictions.max_pedal, _x.target.steering_angle, _x.target.speed, _x.target.speed_abs, _x.target.accel, _x.target.jerk, _x.current.time_sec, _x.current.speed, _x.current.speed_abs, _x.current.accel))
      _x = self.status.status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_B6f3I().pack(_x.status.speed_control_activation_count, _x.status.speed_control_accel_delta, _x.status.speed_control_accel_target, _x.status.accel_control_pedal_delta, _x.status.accel_control_pedal_target, _x.status.brake_upper_border, _x.status.throttle_lower_border, _x.output.header.seq, _x.output.header.stamp.secs, _x.output.header.stamp.nsecs))
      _x = self.output.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3f2BiB().pack(_x.output.throttle, _x.output.steer, _x.output.brake, _x.output.hand_brake, _x.output.reverse, _x.output.gear, _x.output.manual_gear_shift))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.restrictions is None:
        self.restrictions = carla_ackermann_msgs.msg.EgoVehicleControlMaxima()
      if self.target is None:
        self.target = carla_ackermann_msgs.msg.EgoVehicleControlTarget()
      if self.current is None:
        self.current = carla_ackermann_msgs.msg.EgoVehicleControlCurrent()
      if self.status is None:
        self.status = carla_ackermann_msgs.msg.EgoVehicleControlStatus()
      if self.output is None:
        self.output = carla_msgs.msg.CarlaEgoVehicleControl()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 60
      (_x.restrictions.max_steering_angle, _x.restrictions.max_speed, _x.restrictions.max_accel, _x.restrictions.max_decel, _x.restrictions.min_accel, _x.restrictions.max_pedal, _x.target.steering_angle, _x.target.speed, _x.target.speed_abs, _x.target.accel, _x.target.jerk, _x.current.time_sec, _x.current.speed, _x.current.speed_abs, _x.current.accel,) = _get_struct_15f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.status.status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.status.status = str[start:end]
      _x = self
      start = end
      end += 37
      (_x.status.speed_control_activation_count, _x.status.speed_control_accel_delta, _x.status.speed_control_accel_target, _x.status.accel_control_pedal_delta, _x.status.accel_control_pedal_target, _x.status.brake_upper_border, _x.status.throttle_lower_border, _x.output.header.seq, _x.output.header.stamp.secs, _x.output.header.stamp.nsecs,) = _get_struct_B6f3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.output.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.output.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 19
      (_x.output.throttle, _x.output.steer, _x.output.brake, _x.output.hand_brake, _x.output.reverse, _x.output.gear, _x.output.manual_gear_shift,) = _get_struct_3f2BiB().unpack(str[start:end])
      self.output.hand_brake = bool(self.output.hand_brake)
      self.output.reverse = bool(self.output.reverse)
      self.output.manual_gear_shift = bool(self.output.manual_gear_shift)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_15f().pack(_x.restrictions.max_steering_angle, _x.restrictions.max_speed, _x.restrictions.max_accel, _x.restrictions.max_decel, _x.restrictions.min_accel, _x.restrictions.max_pedal, _x.target.steering_angle, _x.target.speed, _x.target.speed_abs, _x.target.accel, _x.target.jerk, _x.current.time_sec, _x.current.speed, _x.current.speed_abs, _x.current.accel))
      _x = self.status.status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_B6f3I().pack(_x.status.speed_control_activation_count, _x.status.speed_control_accel_delta, _x.status.speed_control_accel_target, _x.status.accel_control_pedal_delta, _x.status.accel_control_pedal_target, _x.status.brake_upper_border, _x.status.throttle_lower_border, _x.output.header.seq, _x.output.header.stamp.secs, _x.output.header.stamp.nsecs))
      _x = self.output.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3f2BiB().pack(_x.output.throttle, _x.output.steer, _x.output.brake, _x.output.hand_brake, _x.output.reverse, _x.output.gear, _x.output.manual_gear_shift))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.restrictions is None:
        self.restrictions = carla_ackermann_msgs.msg.EgoVehicleControlMaxima()
      if self.target is None:
        self.target = carla_ackermann_msgs.msg.EgoVehicleControlTarget()
      if self.current is None:
        self.current = carla_ackermann_msgs.msg.EgoVehicleControlCurrent()
      if self.status is None:
        self.status = carla_ackermann_msgs.msg.EgoVehicleControlStatus()
      if self.output is None:
        self.output = carla_msgs.msg.CarlaEgoVehicleControl()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 60
      (_x.restrictions.max_steering_angle, _x.restrictions.max_speed, _x.restrictions.max_accel, _x.restrictions.max_decel, _x.restrictions.min_accel, _x.restrictions.max_pedal, _x.target.steering_angle, _x.target.speed, _x.target.speed_abs, _x.target.accel, _x.target.jerk, _x.current.time_sec, _x.current.speed, _x.current.speed_abs, _x.current.accel,) = _get_struct_15f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.status.status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.status.status = str[start:end]
      _x = self
      start = end
      end += 37
      (_x.status.speed_control_activation_count, _x.status.speed_control_accel_delta, _x.status.speed_control_accel_target, _x.status.accel_control_pedal_delta, _x.status.accel_control_pedal_target, _x.status.brake_upper_border, _x.status.throttle_lower_border, _x.output.header.seq, _x.output.header.stamp.secs, _x.output.header.stamp.nsecs,) = _get_struct_B6f3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.output.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.output.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 19
      (_x.output.throttle, _x.output.steer, _x.output.brake, _x.output.hand_brake, _x.output.reverse, _x.output.gear, _x.output.manual_gear_shift,) = _get_struct_3f2BiB().unpack(str[start:end])
      self.output.hand_brake = bool(self.output.hand_brake)
      self.output.reverse = bool(self.output.reverse)
      self.output.manual_gear_shift = bool(self.output.manual_gear_shift)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_15f = None
def _get_struct_15f():
    global _struct_15f
    if _struct_15f is None:
        _struct_15f = struct.Struct("<15f")
    return _struct_15f
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3f2BiB = None
def _get_struct_3f2BiB():
    global _struct_3f2BiB
    if _struct_3f2BiB is None:
        _struct_3f2BiB = struct.Struct("<3f2BiB")
    return _struct_3f2BiB
_struct_B6f3I = None
def _get_struct_B6f3I():
    global _struct_B6f3I
    if _struct_B6f3I is None:
        _struct_B6f3I = struct.Struct("<B6f3I")
    return _struct_B6f3I
