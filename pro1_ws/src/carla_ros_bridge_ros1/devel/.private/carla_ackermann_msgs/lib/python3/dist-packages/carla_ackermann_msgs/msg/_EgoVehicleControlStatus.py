# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from carla_ackermann_msgs/EgoVehicleControlStatus.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class EgoVehicleControlStatus(genpy.Message):
  _md5sum = "5794a514157c1217dfba31bd9e6ca33c"
  _type = "carla_ackermann_msgs/EgoVehicleControlStatus"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#
# Copyright (c) 2018-2019 Intel Corporation.
#
# This work is licensed under the terms of the MIT license.
# For a copy, see <https://opensource.org/licenses/MIT>.
#
# This represents the control status variables of the ego vehicle control

# the current control status
string status

# speed controller
uint8   speed_control_activation_count
float32 speed_control_accel_delta
float32 speed_control_accel_target

# acceleration controller
float32 accel_control_pedal_delta
float32 accel_control_pedal_target

# borders for lay off pedal
float32 brake_upper_border
float32 throttle_lower_border
"""
  __slots__ = ['status','speed_control_activation_count','speed_control_accel_delta','speed_control_accel_target','accel_control_pedal_delta','accel_control_pedal_target','brake_upper_border','throttle_lower_border']
  _slot_types = ['string','uint8','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       status,speed_control_activation_count,speed_control_accel_delta,speed_control_accel_target,accel_control_pedal_delta,accel_control_pedal_target,brake_upper_border,throttle_lower_border

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(EgoVehicleControlStatus, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.status is None:
        self.status = ''
      if self.speed_control_activation_count is None:
        self.speed_control_activation_count = 0
      if self.speed_control_accel_delta is None:
        self.speed_control_accel_delta = 0.
      if self.speed_control_accel_target is None:
        self.speed_control_accel_target = 0.
      if self.accel_control_pedal_delta is None:
        self.accel_control_pedal_delta = 0.
      if self.accel_control_pedal_target is None:
        self.accel_control_pedal_target = 0.
      if self.brake_upper_border is None:
        self.brake_upper_border = 0.
      if self.throttle_lower_border is None:
        self.throttle_lower_border = 0.
    else:
      self.status = ''
      self.speed_control_activation_count = 0
      self.speed_control_accel_delta = 0.
      self.speed_control_accel_target = 0.
      self.accel_control_pedal_delta = 0.
      self.accel_control_pedal_target = 0.
      self.brake_upper_border = 0.
      self.throttle_lower_border = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_B6f().pack(_x.speed_control_activation_count, _x.speed_control_accel_delta, _x.speed_control_accel_target, _x.accel_control_pedal_delta, _x.accel_control_pedal_target, _x.brake_upper_border, _x.throttle_lower_border))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.status = str[start:end]
      _x = self
      start = end
      end += 25
      (_x.speed_control_activation_count, _x.speed_control_accel_delta, _x.speed_control_accel_target, _x.accel_control_pedal_delta, _x.accel_control_pedal_target, _x.brake_upper_border, _x.throttle_lower_border,) = _get_struct_B6f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_B6f().pack(_x.speed_control_activation_count, _x.speed_control_accel_delta, _x.speed_control_accel_target, _x.accel_control_pedal_delta, _x.accel_control_pedal_target, _x.brake_upper_border, _x.throttle_lower_border))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.status = str[start:end]
      _x = self
      start = end
      end += 25
      (_x.speed_control_activation_count, _x.speed_control_accel_delta, _x.speed_control_accel_target, _x.accel_control_pedal_delta, _x.accel_control_pedal_target, _x.brake_upper_border, _x.throttle_lower_border,) = _get_struct_B6f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B6f = None
def _get_struct_B6f():
    global _struct_B6f
    if _struct_B6f is None:
        _struct_B6f = struct.Struct("<B6f")
    return _struct_B6f
